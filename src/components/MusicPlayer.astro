---
import { useEffect } from 'react';
---
<div class="fixed bottom-4 right-4 z-10">
  <audio id="bgMusic" preload="auto">
    <source src="https://archive.org/download/frank-sinatra-the-very-best-of/The%20Very%20Best%20Of%20Frank%20Sinatra/1-01%20Stardust.mp3" type="audio/mp3">
  </audio>
  <button
    id="musicToggle"
    class="bg-white/10 backdrop-blur-md p-4 rounded-full shadow-xl hover:bg-white/20 transition-all duration-300 group"
    aria-label="Toggle Music"
  >
    <div class="relative">
      <svg id="playIcon" class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"/>
      </svg>
      <svg id="pauseIcon" class="hidden w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 4h4v16H6zM14 4h4v16h-4z"/>
      </svg>
    </div>
    <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-black/75 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
      <span id="musicStatus">Play Music</span>
    </span>
  </button>
</div>

<div id="confetti-container"></div>

<script>
  let isPlaying = false;
  const audio = document.getElementById('bgMusic');
  const musicToggle = document.getElementById('musicToggle');
  const playIcon = document.getElementById('playIcon');
  const pauseIcon = document.getElementById('pauseIcon');
  const musicStatus = document.getElementById('musicStatus');

  function updateMusicUI() {
    if (playIcon && pauseIcon && musicStatus) {
      if (isPlaying) {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
        musicStatus.textContent = 'Pause Music';
        musicToggle?.classList.add('bg-purple-500/50');
      } else {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
        musicStatus.textContent = 'Play Music';
        musicToggle?.classList.remove('bg-purple-500/50');
      }
    }
  }

  // Hide music player when modal is open
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'class') {
        const modalOverlay = document.querySelector('.ReactModal__Overlay');
        if (modalOverlay && musicToggle) {
          const isModalOpen = modalOverlay.classList.contains('ReactModal__Overlay--after-open');
          if (isModalOpen) {
            musicToggle.style.opacity = '0';
            musicToggle.style.pointerEvents = 'none';
          } else {
            musicToggle.style.opacity = '1';
            musicToggle.style.pointerEvents = 'auto';
          }
        }
      }
    });
  });

  // Start observing modal overlay changes
  const modalRoot = document.getElementById('root');
  if (modalRoot) {
    observer.observe(modalRoot, {
      attributes: true,
      subtree: true,
      attributeFilter: ['class']
    });
  }

  // Auto-play music on first interaction
  function attemptAutoPlay() {
    if (!isPlaying && audio) {
      audio.play().then(() => {
        isPlaying = true;
        updateMusicUI();
      }).catch((error) => {
        console.log('Auto-play prevented:', error);
      });
    }
  }

  // Try to auto-play on first interaction
  document.addEventListener('click', attemptAutoPlay, { once: true });
  document.addEventListener('touchstart', attemptAutoPlay, { once: true });

  if (musicToggle && audio) {
    musicToggle.addEventListener('click', () => {
      if (isPlaying) {
        audio.pause();
      } else {
        audio.play();
      }
      isPlaying = !isPlaying;
      updateMusicUI();
    });

    audio.addEventListener('ended', () => {
      isPlaying = false;
      updateMusicUI();
    });
  }
</script>

<style>
  .group:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
</style>