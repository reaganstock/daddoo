---
import { useEffect } from 'react';
const { className } = Astro.props;
---
<div class={`fixed bottom-4 right-4 z-50 ${className}`}>
  <button
    id="musicToggle"
    class="bg-white/10 backdrop-blur-md p-4 rounded-full shadow-xl hover:bg-white/20 transition-all duration-300 group"
    aria-label="Toggle Music"
  >
    <div class="relative">
      <svg 
        id="playIcon" 
        class="w-6 h-6 text-white" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width="2" 
          d="M9 19V5l12 7-12 7z M9 5v14"
        />
      </svg>
      <svg 
        id="pauseIcon" 
        class="hidden w-6 h-6 text-white" 
        fill="none" 
        stroke="currentColor" 
        viewBox="0 0 24 24"
      >
        <path 
          stroke-linecap="round" 
          stroke-linejoin="round" 
          stroke-width="2" 
          d="M21 12H3m0 0l8.5-8.5M3 12l8.5 8.5"
        />
      </svg>
    </div>
    <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-black/75 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
      <span id="musicStatus">Pause Music</span>
    </span>
  </button>

  <audio id="bgMusic" loop>
    <source src="/celebration-music.mp3" type="audio/mp3" />
    Your browser does not support the audio element.
  </audio>
</div>

<div id="confetti-container"></div>

<script>
  import confetti from 'canvas-confetti';

  document.addEventListener('DOMContentLoaded', function() {
    const musicToggle = document.getElementById('musicToggle');
    const bgMusic = document.getElementById('bgMusic');
    const playIcon = document.getElementById('playIcon');
    const pauseIcon = document.getElementById('pauseIcon');
    const musicStatus = document.getElementById('musicStatus');

    let isPlaying = false;

    function toggleMusic() {
      if (!bgMusic) return;
      
      if (isPlaying) {
        bgMusic.pause();
        playIcon?.classList.remove('hidden');
        pauseIcon?.classList.add('hidden');
        musicStatus.textContent = 'Play Music';
      } else {
        bgMusic.play().catch(error => {
          console.error('Error playing music:', error);
        });
        playIcon?.classList.add('hidden');
        pauseIcon?.classList.remove('hidden');
        musicStatus.textContent = 'Pause Music';
      }
      isPlaying = !isPlaying;
    }

    musicToggle?.addEventListener('click', toggleMusic);

    // Try to autoplay when the page loads
    bgMusic?.play().then(() => {
      isPlaying = true;
      playIcon?.classList.add('hidden');
      pauseIcon?.classList.remove('hidden');
      musicStatus.textContent = 'Pause Music';
    }).catch(error => {
      console.error('Autoplay failed:', error);
      isPlaying = false;
      playIcon?.classList.remove('hidden');
      pauseIcon?.classList.add('hidden');
      musicStatus.textContent = 'Play Music';
    });
  });

  // Start confetti on page load
  const duration = 5 * 1000;
  const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };
  const animationEnd = Date.now() + duration;

  function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
  }

  const interval = setInterval(function() {
    const timeLeft = animationEnd - Date.now();

    if (timeLeft <= 0) {
      return clearInterval(interval);
    }

    const particleCount = 50 * (timeLeft / duration);
    confetti(Object.assign({}, defaults, {
      particleCount,
      origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
    }));
    confetti(Object.assign({}, defaults, {
      particleCount,
      origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
    }));
  }, 250);
</script>

<style>
  .group:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
</style>