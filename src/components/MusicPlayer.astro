---
---

<div class="fixed bottom-4 right-4 z-50">
  <audio id="bgMusic" preload="auto" autoplay>
    <source src="/celebration-music.mp3" type="audio/mp3">
  </audio>
  <button
    id="musicToggle"
    class="bg-white/10 backdrop-blur-md p-4 rounded-full shadow-xl hover:bg-white/20 transition-all duration-300 group"
    aria-label="Toggle Music"
  >
    <div class="relative">
      <svg id="playIcon" class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <svg id="pauseIcon" class="hidden w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
    </div>
    <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 text-xs text-white bg-black/75 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
      <span id="musicStatus">Pause Music</span>
    </span>
  </button>
</div>

<div id="confetti-container"></div>

<script>
  import confetti from 'canvas-confetti';

  let isPlaying = true;
  const audio = document.getElementById('bgMusic');
  const musicToggle = document.getElementById('musicToggle');
  const playIcon = document.getElementById('playIcon');
  const pauseIcon = document.getElementById('pauseIcon');
  const musicStatus = document.getElementById('musicStatus');

  // Initialize UI to show pause state since we're auto-playing
  if (playIcon && pauseIcon && musicStatus) {
    playIcon.classList.add('hidden');
    pauseIcon.classList.remove('hidden');
    musicStatus.textContent = 'Pause Music';
    musicToggle?.classList.add('bg-purple-500/50');
  }

  // Handle autoplay failure
  if (audio) {
    audio.play().catch((error) => {
      console.log('Autoplay prevented');
      isPlaying = false;
      updateMusicUI();
    });
  }

  function updateMusicUI() {
    if (playIcon && pauseIcon && musicStatus) {
      if (isPlaying) {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
        musicStatus.textContent = 'Pause Music';
        musicToggle?.classList.add('bg-purple-500/50');
      } else {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
        musicStatus.textContent = 'Play Music';
        musicToggle?.classList.remove('bg-purple-500/50');
      }
    }
  }

  if (musicToggle && audio) {
    musicToggle.addEventListener('click', () => {
      if (isPlaying) {
        audio.pause();
      } else {
        audio.play();
      }
      isPlaying = !isPlaying;
      updateMusicUI();
    });
  }

  // Start confetti on page load
  const duration = 5 * 1000;
  const animationEnd = Date.now() + duration;
  const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

  function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
  }

  const interval = setInterval(function() {
    const timeLeft = animationEnd - Date.now();

    if (timeLeft <= 0) {
      return clearInterval(interval);
    }

    const particleCount = 50 * (timeLeft / duration);
    confetti(Object.assign({}, defaults, {
      particleCount,
      origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
    }));
    confetti(Object.assign({}, defaults, {
      particleCount,
      origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
    }));
  }, 250);
</script>

<style>
  .group:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
</style>