---
import { useEffect } from 'react';
const { className } = Astro.props;
---
<div class={`fixed bottom-4 right-4 z-50 ${className}`}>
  <button
    id="musicToggle"
    class="bg-gray-800 hover:bg-gray-700 text-white rounded-full p-3 shadow-lg transition-all duration-300 ease-in-out transform hover:scale-110"
    aria-label="Toggle music"
  >
    <svg
      id="playIcon"
      class="w-6 h-6"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 19V5l12 7-12 7z"
      />
    </svg>
    <svg
      id="pauseIcon"
      class="w-6 h-6 hidden"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 12H3m0 0l8.5-8.5M3 12l8.5 8.5"
      />
    </svg>
  </button>

  <audio id="bgMusic" loop>
    <source src="/celebration-music.mp3" type="audio/mp3" />
    Your browser does not support the audio element.
  </audio>
</div>

<div id="confetti-container"></div>

<script>
  import confetti from 'canvas-confetti';

  document.addEventListener('DOMContentLoaded', function() {
    const musicToggle = document.getElementById('musicToggle');
    const bgMusic = document.getElementById('bgMusic');
    const playIcon = document.getElementById('playIcon');
    const pauseIcon = document.getElementById('pauseIcon');

    let isPlaying = false;

    function toggleMusic() {
      if (!bgMusic) return;
      
      if (isPlaying) {
        bgMusic.pause();
        playIcon?.classList.remove('hidden');
        pauseIcon?.classList.add('hidden');
      } else {
        bgMusic.play().catch(error => {
          console.error('Error playing music:', error);
        });
        playIcon?.classList.add('hidden');
        pauseIcon?.classList.remove('hidden');
      }
      isPlaying = !isPlaying;
    }

    musicToggle?.addEventListener('click', toggleMusic);

    // Try to autoplay when the page loads
    bgMusic?.play().then(() => {
      isPlaying = true;
      playIcon?.classList.add('hidden');
      pauseIcon?.classList.remove('hidden');
    }).catch(error => {
      console.error('Autoplay failed:', error);
      isPlaying = false;
      playIcon?.classList.remove('hidden');
      pauseIcon?.classList.add('hidden');
    });
  });

  // Start confetti on page load
  const duration = 5 * 1000;
  const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };
  const animationEnd = Date.now() + duration;

  function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
  }

  const interval = setInterval(function() {
    const timeLeft = animationEnd - Date.now();

    if (timeLeft <= 0) {
      return clearInterval(interval);
    }

    const particleCount = 50 * (timeLeft / duration);
    confetti(Object.assign({}, defaults, {
      particleCount,
      origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
    }));
    confetti(Object.assign({}, defaults, {
      particleCount,
      origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
    }));
  }, 250);
</script>

<style>
  .group:hover .group-hover\:opacity-100 {
    opacity: 1;
  }
</style>